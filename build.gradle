apply plugin: 'java-library'
apply plugin: 'java'

libsDirName = System.getenv("libsDirName") == null ? libsDirName : System.getenv("libsDirName")
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

sourceSets {
    main {
        java {
            srcDirs 'src'
        }

        resources {
            srcDirs 'resources'
        }
    }
    
    test {
    	java {
            srcDirs 'test'
        }
    }
}

repositories {
	mavenCentral()
	
    flatDir {
        dirs 'libs'
    }

    maven {
        url 'https://repo.destroystokyo.com/repository/maven-public/'
    }

    maven {
        url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
	
	maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    maven {
        url 'https://jitpack.io'
    }

    maven {
        url 'https://repo.varoplugin.de/repository/maven-public/'
    }
	
    maven {
        url 'https://nexus.velocitypowered.com/repository/maven-public/'
    }
}

configurations {
    internalLibs
    implementation.extendsFrom(internalLibs)
}

dependencies {
	testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.2")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.7.2")

    this.addModularInternal("com.oracle.ojdbc:ojdbc8:19.3.0.0", "ojdbc", false)
    this.addModularInternal("mysql:mysql-connector-java:8.0.28", "mysql-connector", false)
    this.addModularInternal('com.github.almighty-satan:jo2sql:1.2.2', 'jo2sql', false)
    this.addModularInternal('com.googlecode.json-simple:json-simple:1.1.1', 'gson', false)
    this.addModularCompile('com.velocitypowered:velocity-api:3.0.1', 'velocity', false)
    this.addModularCompile('org.spigotmc:spigot-api:1.8.8-R0.1-SNAPSHOT', 'spigot', false)
    this.addModularCompile('com.github.SkriptLang:Skript:2.6.1', 'skript', false)
    annotationProcessor 'com.velocitypowered:velocity-api:3.0.1'
}

boolean checkLib(String filePath) {
    return file('libs/' + filePath + '.jar').exists()
}

void addModularCompile(String repoName, String fileName, boolean changingB) {
    if (this.checkLib(fileName))
        this.dependencies.implementation name: fileName
    else
        this.dependencies.implementation (repoName) { changing = changingB }
}

void addModularInternal(String repoName, String fileName, boolean changingB) {
    if (this.checkLib(fileName))
        this.dependencies.internalLibs name: fileName
    else
        this.dependencies.internalLibs (repoName) { changing = changingB }
}

jar {
    manifest {
        attributes(
                'Manifest-Version': '1.1',
                'Class-Path': '.',
                'Main-Class': 'net.kettlemc.language.MainLauncher',
        )
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.internalLibs.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}


test {
	useJUnitPlatform()

	testLogging {
        exceptionFormat = 'full'
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}
